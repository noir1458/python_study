 
//

>리스트 예제 
menu = 0
friends = []
while menu != 9:
    print("---")
    print("1.친구리스트 출력")
    print("2.친구추가")
    print("3.삭제")
    print("4.변경")
    print("9.종료")
    menu = int(input("메뉴선택:"))
    if menu == 1:
        print(friends)
    elif menu == 2:
        name = input("이름을 입력하세요 : ")
        friends.append(name)
    elif menu == 3:
        del_name = input("삭제할 이름")
        if del_name in friends:
            friends.remove(del_name)
        else:
            print("이름없음")
    elif menu == 4:
        old_name = input("바꿀이름 입력")
        if old_name in friends:
            index = friends.index(old_name)
            new_name = input("새이름 입력")
            friends[index] = new_name
        else:
            print("이름없음")
 
 
//
 
>예제
#튜플로 가능한 대입연산1
names = ('a','b','c')
if 'a' in names:
    print("있음")
else :
    print("없음")

>결과
있음 

튜플은 값의 집합이라는 면에서 리스트와 유사하지만 초기화한 후 편집할수 없다는점이 다르다. 튜플을 상수 리스트라고도 부른다. 튜플을 정의할때는 () 괄호를 사용한다.
데이터를 데이터베이스나 네트워크에서 구했다면 굳이 변경할 필요는 없으므로 튜플을 사용해도 무방하다.

print함수는 튜플을 출력할때 () 괄호를 같이 출력하여 리스트가 아닌 튜플임을 나타낸다. 정의할때는 꼭 () 괄호를 감쌀 필요 없이 값만 나열해도 상관 없다. 콤마로 구분된 값이 나열되어 있으면 튜플이라고 파악한다.

score = 88, 95, 70
#score = (88, 95, 70) 같다

//

>예제
tu = 2,
value = 2
print(tu)
print(value)

>결과
(2,)
2

요소가 하나밖에 없는 튜플은 일반 변수와 구분되지 않으므로 값 다음에 여분의 콤마를 찍어 튜플임을 표시한다.

//

>예제
tu = 1,2,3,4,5
print(tu[3])
print(tu[1:4])
print(tu + (6,7))
print(tu * 2)
#tu[1]=100  튜플의 요소 변경 불가능
#del tu[1]=100  튜플의 요소 삭제 불가능

>결과
4
(2, 3, 4)
(1, 2, 3, 4, 5, 6, 7)
(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)

튜플의 요소를 읽는것은 언제나 가능하다. 범위를 추출해서 잘라낼수도 있고 + 연산자로 튜플끼리 연결하거나 *연산자로 튜플의 요소를 반복할 수도 있다. 그러나 튜플의 요소를 변경하거나 삭제하는것은 불가능하다


//

>예제
tu = "a","b","c"
aa, bb, cc =tu
print(aa)
print(bb)

print(cc)

>결과
a
b
c

세개의 요소를 가지는 튜플을 정의하고 세 변수를 튜플로 만들어 튜플끼리 대입하면 대응되는 요소끼리 대입된다. 좌변의 세 변수에 튜플의 세 요소가 순서대로 대입된다.
튜플에 저장된 요소를 풀어헤쳐 (tuple unpacking) 각 변수에 나누어 대입하는 셈이다. 이 기능을 사용하면 두 변수의 값을 한꺼번에 초기화 할 수 있고, 두 값을 쉽게 교환할수도 있다.

//

>예제
a,b =12,34
print(a,b)
a,b=b,a
print(a,b)

>결과
12 34
34 12

요소를 하나씩 순서대로 대입하는게 아니라 우변을 모두 평가한 후 한꺼번에 대입한다. 하나씩 대입한다면 불가능하다.

 
//
 
>예제
#4함수의 튜플반환 (파이썬에서는 여러개의값을 반환가능)
import math
def calCircle(r):
    area = math.pi*r*r
    circle = 2 * math.pi *r
    return (area, circle)

rad = float(input("반지름 입력"))
(a,c) = calCircle(rad)
print("면적:",str(a),"둘레:",str(c))

>결과
반지름 입력3
면적: 28.274333882308138 둘레: 18.84955592153876

튜플을 사용하면 리턴값을 여러개 반환할 수 있다. 인수는 얼마든지 많이 넘길 수 있지만 리턴값은 하나밖에 없는것이 원칙이다. 그러나 내부에 요소를 포함하는 튜플을 사용하면 두개 이상의 값을 반환할 수 있다.

 
//

>예제
import time
def gettime():
    now = time.localtime()
    return now.tm_hour , now.tm_min

result = gettime()
print("지금은 %d시 %d분 입니다" %(result[0],result[1]))

>결과
지금은 3시 7분 입니다

두 값이 묶여있는것 뿐이지 리턴값은 튜플 하나인 셈이다. 이런 방법으로 얼마든지 많은 리턴값을 넘길 수 있다.

튜플의 요소를 추출하는것이 귀찮다면 리턴값을 개별 변수에 직접 대입받는다.
hour, min = gettime()
print("지금은 %d시 %d분 입니다" %(hour, min))


 
//

>예제
d, m = divmod(7,3)
print("몫",d)

print("나머지",m)

>결과
몫 2
나머지 1

여러개의 리턴을 받을수 있다는 점에서 편리하지만 일단 대입받아야 쓸 수 있어서 함수 호출문을 수식에 바로 쓰기는 어렵다. 내장 함수중에는 튜플로 2개의 값을 반환하는것이 있다.
divmod 함수는 나눗셈의 몫과 나머지를 튜플로 묶어 리턴한다.



//
 
>예제
score = [88,95,70,100,99]
tu = tuple(score) #tuple함수를 사용해서 튜플로 바뀌면 편집불가
#tu[0]=100 튜플에 값을 대입시 에러처리된다
print(tu)
li = list(tu) #list함수를 사용해서 리스트로 바꾼 후 편집가능
li[0] = 100
print(li)
 
>결과
(88, 95, 70, 100, 99)
[100, 95, 70, 100, 99]

리스트와 튜플은 값 변경 가능성 여부만 다를 뿐 내부구조가 비슷해서 상호 변환이 가능하다.



튜플을 사용하는 이유 : 튜플로 가능한 일은 리스트로도 모두 가능하다. 값의 집합을 표현할 수 있고 요소를 변경하는 편집까지 가능하니 리스트는 튜플의 기능을 모두 포괄하는 더 큰 타입이다. 그럼에도 변경 불가능한 튜플을 제공하는 이유는.
1. 비용의 차이가 있다. 리스트는 변경 가능성을 항상 대비해야 하므로 더 많은 메모리를 사용하고 속도가 느리다. 튜플은 값의 집합만 표현할 뿐 바뀔 일이 없으므로 내부구조가 단순하고 읽는 속도가 빠르다
2. 편집할수 없어 안정적이다. 리스트는 실수나 사고로 값이 바뀔수 있지만 튜플은 한번 정해지면 그럴수 없다.

//


