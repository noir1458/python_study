1. 반복문(2)

1-1. 이중 루프
루프 안에 들어가는 명령의 종류에는 제약이 없고, 다른 루프가 들어갈 수도 있다. 루프끼리 중첩된 것을 이중 루프라고 한다.


[예제]
for a in range (2,10):
    print(a, "단")
    for b in range (2,10):
        print(a,"x",b,"=",a*b)
    print()


>결과

2 단   
2 x 2 = 4
2 x 3 = 6
2 x 4 = 8
2 x 5 = 10
2 x 6 = 12
2 x 7 = 14
2 x 8 = 16
2 x 9 = 18

3 단
3 x 2 = 6
.....

루프의 이름은 제어변수로 붙이는데 이 예제는 두개의 루프가 있다.(a, b) 이중 루프를 작성할때는 들여쓰기를 주의해야 한다.
위 예제는 while문으로 작성할수도 있다(생략)



1-2. 무한 루프
무한 루프는 횟수를 정하지 않고 무한히 반복하는 루프이다. 반복횟수를 알수 없다면 무한히 반복하게 하고, 중간에 조건을 점검해서 탈출하는 형태이다. while문으로 작성하며 for문으로는 무한루프를 만들수 없다.

while True:
    명령
    if 탈출조건 : break




[예제]
print("1 + 2 = ?")
while True:
     a = int(input("?는"))
     if a==3:break
print("정답")


>정답
1 + 2 = ?
?는1
?는3
정답

루프 안에서 끝낼 시점을 결정하게 된다. 조건이 만족할때까지 반복하게 된다.



1-3. 범위
range 함수는 범위의 끝을 제외한다.
일상생활에서는 1부터 세지만 0부터 체크하는것이 자연스럽게 되는 경우가 많다. 건물을 예로 1층과 지하1층의 간격, 1층과 2층의 간격은 같지만. 숫자로 따지면 이상하게 느껴진다. 이것은 0이 빠졌기 때문이다.
컴퓨터는 항상 0부터 시작하며, 기준점(base)로부터 상대적인 거리를 오프셋 이라고 하는데 0부터 시작해야 자연스러운 계산이 된다.

리스트의 첫 요소는 [1] 이 아니라 [0] 이다. 이런 방식은 약속된 것이며 일관되게 지키면 문제는 발생하지 않는다.



2. 함수
비슷한 코드가 반복되는 경우가 있다. 이런 경우 소스가 길어지고 구조상으로 안좋게 되므로, 함수를 사용해 정의해 놓고 사용하는것이 좋다.

def 함수명(인수 목록):
    본체

함수를 호출할떄는

함수(인수 목록)

이렇게 호출한다



2-1. 인수(매개변수)와 리턴값
인수 있다없다 2가지경우
리턴값 있다없다 2가지경우
2*2로 총 4가지 경우가 있다

인수 => 함수 => 리턴값


1. 인수x 리턴값x
[예제]
def greeting_100():
    for num in range (3):
            print('안녕!')
greeting_100()


>결과
안녕!
안녕!
안녕!


2. 인수x 리턴값o
[예제]
def sum_100():
    sum=0
    for num in range(1,101):
        sum+=num
    return sum
print("1~100의 합:", sum_100())


>결과
1~100의 합: 5050


3. 인수o 리턴값 x
[예제]
def greeting_n(end):
    for num in range (1, end+1):
            print('안녕!')
greeting_n(4)


>결과
안녕!
안녕!
안녕!
안녕!


4. 인수o 리턴값o
[예제]
def sum_n(start,end):
    sum=0
    for num in range(start,end+1):
        sum+=num
    return sum
print("1~100의 합:", sum_n(1,100))


>결과
1~100의 합: 5050



2-2. pass 명령
pass명령은 파이썬의 모든 명령 중 가장 간단하며 아무 동작도 안하는것이다. 함수가 아닌 키워드이며 해석기가 직접 지원한다. 해석기는 pass 명령을 만나면 무시하고 건너뛴다.


[예제]
def function():
    pass


pass를 적지 않으면 오류가 발생한다. 함수의 내용을 나중에 작성할 계획일때 사용하면 된다. pass 대신 #나중에 작성 이라고 주석을 작성해도 해석기가 완전히 무시하고 def 함수명(): 만 남게 되므로 오류가 발생한다. pass는 빈 코드임을 나타내는 명령이며 본체의 역할을 한다. 함수뿐만 아니라 클래스나 조건문 작성시에도 사용한다.



3. 인수의 형식

3-1. 가변 인수
일반적인 함수는 정의문에 필요한 인수 개수가 명시되어 있고, 호출할때 이 개수에 맞게 실 인수를 넘겨야 한다. 가변 인수는 임의 개수의 인수를 받는다.

[예제]
def intsum(*ints):
    sum=0
    for num in ints:
        sum+=num
    return sum
print(intsum(100,300))
print(intsum(100,300,700))


>결과
400
1100

인수 이름 앞에 *기호를 붙이면 이 자리에 여러개의 인수가 올 수 있다. 파이썬은 호출문에 나타난 실인수들을 튜플로 묶어 전달하고, 본체에서 for 루프를 돌며 튜플의 요소를 꺼내서 사용한다. 얼마든지 많은 정수의 합을 구할수 있다.


[예제]
intsum(a, *ints) #가능하다
intsum(*ints, a) #에러
intsum(*ints, *a) #에러


가변 인수는 이후의 모든 인수를 다 포함하기 때문에 인수 목록에 마지막에 와야 한다. 그렇지 않으면 어디까지 가변 인수인지 구분할수 없기 때문이다. 가변인수가 2개 이상 있어서도 안된다. 마지막에 하나만 올수 있다.

가변 인수를 사용하는 대표적인 함수가 print문이다. 개수와 타입에 제한이 없이 콤마로 구분해서 전달하면 된다. 출력 대상이 무엇이든 모든 인수를 문자열 형태로 바꾼 후 화면에 출력한다.



[예제]
def passsc(*score):
    sum=0
    count=0
    s_60=0
    for num in score:
        if num<=60:
            s_60=1
        sum+=num
        count+=1
    if s_60==1:
        print('과락')
    else:
        if sum/count>=70:
            print('합격')
        else:
            print('불합격')

passsc(60,70,80,90,60)


>결과
과락

점수 평균을 구해서 과락, 합격, 불합격 판단하는 예제.




>예제
#가변인수
def aster_test2(*args):
    x,y,*z=args
    return x,y,z
print(aster_test2(1,2,3,4,5,6,7,8,9))

>결과
(1, 2, [3, 4, 5, 6, 7, 8, 9])



3-2.  인수의 기본값
[예제]
def report(name="없음", email="없음", phone="없음"):
    print("성명:", name)
    print("이메일:", email)
    print("연락처:", phone)
    print("================")

report("강바람","gang.naver","010-1111-1111")
report("들국화","guk.naver")
report("채송화")
report()

>결과
성명: 강바람
이메일: gang.naver
연락처: 010-1111-1111
================
성명: 들국화
이메일: guk.naver
연락처: 없음
================
성명: 채송화
이메일: 없음
연락처: 없음
================
성명: 없음
이메일: 없음
연락처: 없음
================


인수에 위에 방법(="없음")으로 초기값을 지정할수 있다.
그러나 기본값을 가지는 인수 뒤에 일반 인수가 올수는 없다. 중간을 생략할수 없고 끝부분만 생략할수 있으므로 기본값을 가지는 인수는 목록의 뒤쪽에 적어야 한다.

def a_(x,y=1,z)
    함수내용
a_(1,3)
이 경우 y가 3인지, y는 기본값이고 z가 3인지 애매하게 된다.
a_(1,,3)과 같은 중간인수를 비워놓는 표기는 허용하지 않는다.



3-3. 키워드 인수
함수 호출시 함주 정의문에 선언된 순서대로 실인수를 전달하며 호출문에 나타내는 순서에 따라 형식 인수에 차례대로 대입된다. 순서대로 인수를 전달하는 방식을 위치 인수 (Positional argument)라고 하는데 호출문이 짧고 간단하지만 인수의 수가 많아지면 헷갈린다. 인수의 순서와 의미를 숙지해야 하기 때문이다.

[예제]
def report(name, email, phone):
    print("성명:", name)
    print("이메일:", email)
    print("연락처:", phone)
    print("================")

report(name="강바람",email="gang.naver",phone="010-1111-1111")
report(phone="010-1111-1111",name="강바람",email="gang.naver")
report("강바람","gang.naver",phone="010-1111-1111")
report("강바람",phone="010-1111-1111",email="gang.naver")

>결과
성명: 강바람
이메일: gang.naver
연락처: 010-1111-1111
================
성명: 강바람
이메일: gang.naver
연락처: 010-1111-1111
================
성명: 강바람
이메일: gang.naver
연락처: 010-1111-1111
================
성명: 강바람
이메일: gang.naver
연락처: 010-1111-1111
================

이렇게 순서와 무관하게 인수의 이름을 지정해 대입 형식으로 전달하는 방법을 키워드 인수 라고 한다. 이름으로 구분 가능하므로 순서가 바뀌어도 상관없다

위치인수는 항상 먼저 와야하며, 앞에 키워드 인수가 왔으면 뒤쪽에는 위치 인수가 올수 없다(뒤부터 채운다)

report(name="강바람",email="gang.naver","010-1111-1111")
위 방법은 불가능하다
규칙이 복잡해 보이지만 짝을 제대로 찾을수 있으면 된다.


[예제]
a=1
b=2
print(a,b)
print(a,b,end=',')
print(a,b,end=',',sep='@')
print(a,b,sep='@',end=',')

>결과
1 2
1 2,1@2,1@2,

print함수의 end, sep 인수가 대표적인 키워드 인수이며 기본값까지 지정되어 있다.



3-4. 키워드 가변 인수

키워드 인수를 가변 개수 전달할 때는 인수 목록에 **기호를 붙인다. 호출원에서 여러개의 키워드 인수를 전달하면 인수의 이름과 값의 쌍을 사전으로 만들어 전달한다. 함수 내부에서는 사전을 읽듯이 인수값을 꺼내서 사용한다.
사전은 순서가 없는 집합이라서 인수의 전달 순서는 상관없다.

[예제]
def calcstep(**args):
    begin_ = args['begin']
    end_ = args['end']
    step_ = args['step']

    sum = 0
    for num in range(begin_, end_+1, step_):
        sum+=num
    return sum

print("3 ~ 5 =", calcstep(begin = 3, end = 5, step = 1))
print("3 ~ 5 =", calcstep(step = 1, begin = 3, end = 5))

>결과
3 ~ 5 = 12
3 ~ 5 = 12



위치 인수와 키워드 인수를 동시에 가변으로 취할수도 있다, 이 경우 위치 인수가 먼저오고 키워드 인수가 뒤에 온다.

[예제]
def calcscore(name,*score,**option):
    print(name)
    sum=0
    for s in score:
        sum+=s
    print("총점 :",sum)
    if(option['avg']==True):
        print("평균 :",sum/len(score))

calcscore("홍길동",10,30,20,avg=True)
calcscore("홍길동",10,30,20,avg=False)

>결과
홍길동
총점 : 60
평균 : 20.0
홍길동
총점 : 60



>예제
#키워드 가변인수
def kwards_test(**kargs):
    print(kargs)
    print("first value is {first}.".format(**kargs))
    print("first value is {second}.".format(**kargs))
    print("first value is {third}.".format(**kargs))
kwards_test(first = 3, second = 4, third = 5)

>결과
{'first': 3, 'second': 4, 'third': 5}
first value is 3.
first value is 4.
first value is 5.






