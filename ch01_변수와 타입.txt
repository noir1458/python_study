python 설치시 도움말이 함께 설치된다. 파이썬 안의 모든 함수와 모듈에 대한 레퍼런스까지 구비되어 있다. 공식 문서인만큼 신뢰성이 높고 정확하니 참고하자.

이전에 설치한 visual studio code를 이용하거나
간단한 코드의 경우 IDLE를 실행해서 대화식 모드로 테스트해도 좋다


c,java와 다르게 파이썬의 경우 {}같은 명시적인 블록을 사용하지 않는다

if num>10:
    print("10보다크다")

조건문, 반복문처럼 여러개의 문장이 블록을 구성하는 경우, 블록에 속한 구문을 안쪽으로 들여쓴다. 들여쓰기는 탭 또는 4개의 공백으로 표기한다. (탭이 에디터에 따라 폭이 달라지는 문제가 있다)

c와 java는 괄호{}의 짝만 맞다면 코드를 한줄에 쓰거나 여러줄에 쓰는것을 상관하지 않는다. 소스의 형식에 제한이 없는 이런 방식을 프리포맷(free format)이라고 한다.
들여쓰기, 개행만 강제할뿐 공백은 필요하다면 넣어도 된다.

주석은 # 문자를 사용, 한줄 주석이다.
visual studio code 에서 여러줄 주석을 사용할때는 ''' ...내용... ''' 이렇게 쓰면 된다.



대화식 모드 : 명령을 입력하면 즉시 응답한다
스크립트 모드 : 텍스트 파일에 일련의 명령을 작성해서 한꺼번에 순차적으로 실행하는 방식. 명령어가 길고 복잡해도 상관없으며, 파일에 저장되어 필요할때 수정도 가능하다. 이미 저장된 코드를 재사용해도 된다

1.출력
print(출력내용 [,sep=구분자][,end=끝문자])

[예제]
>>> 2+3
5
>>> #대화식 모드는 그냥 적어도 출력된다
>>>
>>> a=12
>>> b=34
>>> print(a,b)
12 34
>>> print(a,b,sep='=>')
12=>34
>>> print(a,b,a,b,sep='=>')
12=>34=>12=>34
>>> print(a,b,a,b,sep='=>',end='====>')
12=>34=>12=>34====>
>>> print(a,b,a,b,sep='',end='====>')
12341234====>
>>>


print 명령의 end 인수는 내용을 출력한 후 더 출력할 문자를 지정하는데, 이 값이 개행 문자로 되어있어 한번 호출할떄마다 자동 개행된다. end 인수를 다른 문자로 지정하면 개행 코드 대신 이 문자가 출력된다. end를 ''(빈 문자열)로 지정하면 내용만 출력하고 아무것도 더 출력되지 않아서 print 호출이 이어서 출력된다.


2.입력
변수 = input('질문내용')

[예제]
>>>
>>> a=input('a는?')
a는?3
>>> print(a)
3
>>> #input 로 입력받은것은 문자열이므로
>>> #연산을 하거나 하려면 숫자로 바꾸는것이 좋다
>>>
>>> x=input('x는?')
x는?20
>>> y=input('y는?')
y는?10
>>> sum=x+y
>>> print(sum)
2010
>>> #문자열을 그냥 더해버려서 이렇게 나온것 같다...
>>>
>>> sum=int(x)+int(y)
>>> print(sum)
30
>>> #받은 값을 int로 바꿔주고 연산하면 결과가 원하는 방향으로 나온다
>>>
>>> x=int(input('x?'))
x?10
>>> y=int(input('y?'))
y?100
>>> sum=x+y
>>> print(sum)
110
>>> print(x+y)
110
>>>
>>> #이렇게 입력받아도 좋다.
>>> #입력받아놓고 숫자로 바꿔서 쓸지, 입력 받을때 미리 정수로 바꿔서 놓을지의 차이


파이썬은 유니코드를 지원하므로 한글이나 한자도 입력받아서 저장 가능하다.



3.변수

변수 규칙
 - keyword는 사용할수 없다. 용도가 미리 정해져 있어서 예약어라고도 한다. 파이썬은 예약어가 많지 않음
 - 내장함수, 표준 모듈명도 변수명으로 쓰지 않는것이 좋다. print를 변수명으로 사용하면 이후 출력문을 쓸수 없게 된다.
 - 대소문자 구분
 - 알파벳, 밑줄 문자, 숫자로 구성된다. 공백 +,- 같은 기호는 사용 불가.
 - 첫 글자로 숫자는 사용 불가능하다.
 - 한글, 한자 사용 가능하지만 가급적 짧은 영어단어가 좋다.


[예제]
>>> a='aaa'
>>> print(a)
aaa
>>> a=30
>>> print(a)
30
>>>


파이썬은 실행중에 변수의 타입을 바꿀수 있다. 어떤 값이 대입되는지에 따라 타입이 결정된다. 실행중에 변수의 타입을 바꿀수 있는 특성을 동적 타입(dynamic typing)라고 한다. 별도의 선언 절차가 없으며, 대입하는 값에 따라 특성이 결정되는 방식.


[예제]
>>> type(a)
<class 'int'>
>>>


type명령으로 현재 타입을 조사할수 있다.
python의 모든 값은 객체여서 숫자나 문자열도 클래스의 일종이다. 123은 int, 'string'문자열은 str클래스 소속이다



[예제]
>>> del a
>>> a
Traceback (most recent call last):
  File "<pyshell#47>", line 1, in <module>
    a
NameError: name 'a' is not defined
>>>


변수는 일단 만들어지면 계속 존재하며 값을 유지하고, 프로그램이 끝날 때나 더 쓸 일이 없을때 알아서 사라진다.
del 명령으로 변수를 삭제할수 있다.


3-1.수치형
[예제]
>>> a=0x11
>>> print(a)
17
>>>
>>> # 접두 0x - 16진법(hexadecimal)
>>> # 접두 0o - 8진법(octal)
>>> # 접두 0b - 2진법(binary)
>>>
>>> print(hex(20))
0x14
>>> print(oct(20))
0o24
>>> print(bin(20))
0b10100


접두, 숫자 표시에 사용되는 알파벳은 대소문자를 구분하지 않지만, 보통 소문자를 쓴다.



[예제]
>>> #실수형 큰 값의 부동 소수점 방식 표현
>>> 1.13e10
11300000000.0
>>> #가수e지수
>>>


고정 소수점 방식과 부동 소수점 방식은 표기법의 차이일뿐, 값이 다른것은 아니다. print 명령은 실수를 항상 고정 소수점 형태로 출력한다.



[예제]
a=1+3j
b=4+2j
print (a + b)
print('****')
c=complex(4,-1)
print(c)
#complex 를 이용해서 실수부와 허수부를 구분한 표기도 가능

print('****')

print(a.real)
#복소수.real - 실수부
print(b.imag)
#복소수.imag - 허수부
print(a.conjugate())
#복소수.conjugate() - 켤레 복소수
print(abs(a))
#abs함수 - 복소수의 절댓값


▶결과
(5+5j)
****
(4-1j)
****
1.0
2.0
(1-3j)
3.1622776601683795


복소수는 '실수부+허수부j' 로 표기



3-2.문자형
[예제]
>>> "aaa"abbbb"aaaa"
>>> #이 문자열은 오류다
>>> "aaa'abbbb'aaaa"
"aaa'abbbb'aaaa"
>>> 'aaa"abbbb"aaaa'
'aaa"abbbb"aaaa'
>>>
>>> #한쪽만 큰따옴표, 다른한쪽을 작은따옴표로 써도 오류 발생


확장열 - 설명
\n  - 개행
\t - 탭
\" - 큰따옴표
\' - 작은따옴표
\\ - \문자

문자열 안에 담기 힘든 문자가 있다. 이런 특수한 문자는 \문자 뒤에 특별한 기호로 표기하는데. 이를 확장열(escape sequence)라고 한다.
c에서도 이야기한것과 같이. 키보드 언어에 따라서 \문자는 원 또는 역슬래쉬 두개의 모양으로 나오게 된다. 기능에는 문제없다.



[예제]
>>> a="aaa\naaa"
>>> print(a)
aaa
aaa
>>> a="bb\\bb\'dd\"dsd\taaaa"
>>> print(a)
bb\bb'dd"dsd aaaa
>>>


>>> #긴 문자열의 경우 큰따옴표 세개나 작은따옴표 세개로 표기한다
>>> s=""" 3033httpfghss://culgsdfgstsdfist-tp.tisdfgsdtorsdfgsdfy.com › entry › C언어-긴-문자열-초기화2011. 10. 28. - 출처 : ht"""
>>> print(s)
 3033httpfghss://culgsdfgstsdfist-tp.tisdfgsdtorsdfgsdfy.com › entry › C언어-긴-문자열-초기화2011. 10. 28. - 출처 : ht
>>>



#줄끝에 행 계속 문자인 \를 사용해도 된다


[예제]
b="asdasdasdasd\
asdasdasdasd"
print(b)


>결과
asdasdasdasdasdasdasdasd



[예제]
s="aaa" "Bbb" "CCC"
print(s)
print('****')

ss=("aaa"
 "Bbb" "CCC")
print(ss)


>결과
aaaBbbCCC
****
aaaBbbCCC

콤마로 구분하지 않고 문자열을 나열하면 하나로 합쳐진다. 중간의 공백은 무시된다.
그러나 개행코드는 무시되지 않으며, 다음줄로 내려간 문자열은 합쳐지지 않는다.



[예제]
print(ord('a'))
#a문자의 문자코드를 조사해서 출력
print(chr(98))
#문자코드 98로부터 문자를 구해서 출력

for c in range (ord('A'), ord('Z')+1):
    #반복문, A의 문자코드에서 (Z의 문자코드)-1+1까지 (Z까지)
    #c에 들어가게 된다
    print(chr(c),end=' ')
    #c에 들어온 문자코드로부터 문자를 출력


>결과
97
b
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

파이썬은 문자열 타입만 제공하며, 다른 언어에 있는 문자형은 별도로 없다. 길이 1의 문자열로 문자형을 표현하게 된다.



3-3.진위형
[예제]
>>> a=5
>>> b=a==3
>>> print(b)
False
>>> #첫글자가 대문자
>>>
>>> a=None
>>> print(a)
None
>>> #아무것도 아니라는 특수한 의미의 None



[예제]
a = ['aaa', 'bbb', 'ccc', 'ddd']
print(a)
#메모리상에 요소가 순서대로 저장된다

for m in a:
    print(m, "입니다")

print('아래는 튜플로 작성한것, 예제는 똑같이 동작한다')
b = ('aaa', 'bbb', 'ccc', 'ddd')
for m in b:
    print(m, "입니다")


컬렉션은 여러개의 값을 모아서 저장한다. 다른 언어의 배열이나 구조체와 유사하다. 컬렉션의 대표적인 예는 리스트.(여러개의 값을 하나의 변수에 순서대로 모아놓은것. []괄호 안에 콤마로 구분하여 나열한다)

튜플은 리스트와 비슷하지만, ()로 멤버를 나열하고 실행중에 값을 변경할 수 없다.
리스트는 요소를 삽입, 삭제, 추가할수 있지만 튜플은 한번 정의한 값을 읽을수만 있어서 내부 구조가 단순하고 빠르다

이 외에 사전(dictonary), 집합 등의 컬렉션이 있는데 값을 저장하는 방식과 순서유지 여부, 중복 허용 여부 등이 조금씩 다르다.
사전- 키와 값으 쌍을 저장, 실시간 검색 지원
집합 - 요소의 모음을 관리하고 교집합, 합집합 등 집합 연산을 지원한다.



