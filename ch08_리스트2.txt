>예제
s=[88,95,78,100,99]
sum=0
for i in s:
    sum+=i
print("총점: ",sum)
print("평균: ",sum/len(s))

>결과
총점:  460
평균:  92.0

score[2]에 값을 대입하면 이 요소만 바뀐다 


//
 
>예제
nums=[0,1,2,3,4,5,6,7,8,9]
nums[2:5]=[20,30,40] #교체
print(nums)
nums[6:8]=[90,91,92,93,94] #삽입
print(nums)
>결과
[0, 1, 20, 30, 40, 5, 6, 7, 8, 9]
[0, 1, 20, 30, 40, 5, 90, 91, 92, 93, 94, 8, 9]

일정 범위를 새로운 리스트로 교체할수도 있다. 원본과 대입되는 값으 개수가 꼭 같을 필요는 없다. 3개 빼고 2개를 넣을수도 있고 2개 뺴고 5개를 넣을수도 있다.
 
//

>예제
nums=[0,1,2,3,4,5,6,7,8,9]
nums[2:5]=[] #다중값삭제
del nums[4] #단일값삭제
print(nums)
>결과
[0, 1, 5, 6, 8, 9]

일정 범위에 대해 빈 리스트를 대입하면 해당 범위의 요소를 모두 삭제한다. 요소 하나만 삭제할때는 del명령을 사용한다.


 
//
 
>예제
#이중리스트
tol=[[1,2,3],[4,5],[6,7,8,9]]
print(tol) #보여진 그대로 나옴
print(tol[0]) #첫번째 리스트(0줄)
print(tol[1]) #두번째 리스트(1줄)
print(tol[2]) #세번째 리스트(2줄)

for sub in tol:
    for item in sub:
        print(item, end=' ') #줄 안바꾸고 한줄로
    print() #줄바꿈

for sub in tol:
    print(sub) #1개 for 줄단위로 출력

print(tol[1][1]) #1줄의 1칸 = 5

>결과
[[1, 2, 3], [4, 5], [6, 7, 8, 9]]
[1, 2, 3]
[4, 5]
[6, 7, 8, 9]
1 2 3
4 5
6 7 8 9
[1, 2, 3]
[4, 5]
[6, 7, 8, 9]

5

리스트의 요소에는 제약이 없어서 숫자나 문자열도 가능하고 리스트 자체도 요소가 될 수 있다. 부분 리스트의 길이나 타입은 일치하지 않아도 된다. 순회하려면 이중으로 루프를 돌아야 한다.
 
 
//
 
 
>예제
score = [
[88,76,92,98],
[65,70,58,82],
[82,88,78,88]
]
total = 0
totalsub = 0
for student in score:
    sum = 0
    for subject in student:
        sum = sum + subject
    subjects=len(student)
    print("총점 : %d, 평균 : %.2f" %(sum, sum/subjects))
    total += sum
    totalsub += subjects
print("전체평균 %.2f" %(total/totalsub))

>결과
총점 : 354, 평균 : 88.50
총점 : 275, 평균 : 68.75
총점 : 336, 평균 : 84.00
전체평균 80.42


 
//
 
문제1)

score = [
[90,92,93,88,72],
[88,89,88,92,70],
[52,66,60,61,60]
]
name = ["강바람","민들레","들국화"]
pass_ = ["f","f","f"] #평균 70이상 p

num=0
count = 0
for student in score:
    sum = 0
    avg = 0
    for subject in student:
        sum = sum + subject
    avg = sum/len(student)
    if avg>=70:
        pass_[num]="p"
        count+=1
    print("이름 : %s 총점 : %d, 평균 : %.2f 결과 : %c" %(name[num], sum, avg, pass_[num]))
    num+=1
print("합격인원 : %d명" %count)

>결과
이름 : 강바람 총점 : 435, 평균 : 87.00 결과 : p
이름 : 민들레 총점 : 427, 평균 : 85.40 결과 : p
이름 : 들국화 총점 : 299, 평균 : 59.80 결과 : f
합격인원 : 2명
 
 
//
 
>예제
#리스트 컴프리헨션
nums = [n*2 for n in range(1,11)]
for i in nums:
    print(i, end=', ')
print()
nums = [n for n in range(1,11)]
for i in nums:
    print(i, end=', ')

>결과
2, 4, 6, 8, 10, 12, 14, 16, 18, 20,
1, 2, 3, 4, 5, 6, 7, 8, 9, 10,

리스트 안의 요소가 일정한 규칙을 가지는 수열이라면 일일히 나열할 필요 없이 다음 문법으로 요소의 집합을 정의한다. 이 기능은 하스켈 언어의 문법에서 빌려온 것이며 List Comprehension 이라고 한다.

nums=[]
for n in range(1,11):
    nums.append(n*2)
#nums = [n*2 for n in range(1,11)] 와 같다.

<형식>
[수식 for 변수 in 리스트 if 조건]



//
 
>예제
nums = [n for n in range(1,11) if n%3==0]
print(nums)

nums = [n for n in range(1,101) if n%2==0]
print(sum(nums))

>결과
[3, 6, 9]
2550
 
 
//
 
문제2)
nums = [n for n in range(1,11) if (n%5==0 or n%3==0)]
print(sum(nums))

>결과
33

//


9-2. 리스트 관리
 
>예제
nums = [1,2,3,4]
nums.append(5) #인수로 전달한 요소를 리스트에 끝에 덧붙여 추가
print(nums)
nums.insert(2,99) #삽입할 위치와 요소값을 전달받아 리스트 중간에 삽입
print(nums)

>결과
[1, 2, 3, 4, 5]
[1, 2, 99, 3, 4, 5]

리스트는 문자열과 다르게 변경 가능하다. [] 괄호와 관리 메서드를 활용해 요소를 마음대로 편집할수 있다.

 
//
 
>예제
nums = [1,2,3,4]
nums[2:2] = [99,91,92] #2:2 범위에 3개의 요소를 대입
print(nums)
 
nums = [1,2,3,4]
nums[2] = [99,91,92] #2번 위치에 리스트를 대입
print(nums)

>결과
[1, 2, 99, 91, 92, 3, 4]

[1, 2, [99, 91, 92], 4]

범위에 대한 대입은 해당 범위의 요소를 대체하는 것이되 원본 범위의 길이가 0이면 삽입하는 것과 같다. 요소에 대한 대입은 그것이 정수이든 리스트이든 해당 요소 하나만 교체하는 것이다. 정수 요소에 리스트를 대입하면 부분 리스트로 교체된다.
 
//
 
>예제
list1 = [1,2,3,4,5]
list2 = [10,11]
list1.append(list2) #list2를 끝에 덧붙여 추가
print("list1", list1)
print("list2",list2)
 
list1 = [1,2,3,4,5]
list2 = [10,11]
list1.extend(list2) #호출한 리스트에 인수로 주어진 리스트를 합
print("list1", list1)
print("list2",list2)
 
list1 = [1,2,3,4,5]
list2 = [10,11]
list1 = list1+list2 #list1 += list2는 extend와 같다
print("list1", list1)
print("list2",list2)

>결과
list1 [1, 2, 3, 4, 5, [10, 11]]
list2 [10, 11]
list1 [1, 2, 3, 4, 5, 10, 11]
list2 [10, 11]
list1 [1, 2, 3, 4, 5, 10, 11]

list2 [10, 11]
 
extend 메서드는 호출한 리스트에 인수로 주어진 리스트를 합친다.
 
 
//
 
>예제
score = [88,95,78,100,99,88,78,50]
score.remove(100) #전달받은 요소값을 찾아 삭제
print(score)
del(score[0])
print(score)
score[1:4] = []
print(score)

>결과
[88, 95, 78, 99, 88, 78, 50]
[95, 78, 99, 88, 78, 50]
[95, 78, 50]

remove는 인수로 전달받은 요소값을 찾아 삭제한다. 리스트 소속의 메서드이므로 score.remove(값) 형식으로 호출한다. 해당값이 없으면 예외를 발생시키고 값이 2개 이상이면 처음 발견한 요소 하나만 삭제한다.

del명령은 순서값을 지정하여 삭제하며 할당의 반대 동작을 수행한다. del은 파이썬의 키워드여서 del(score[2]) 의 함수 형식으로 호출할수도 있고 del score[2]로 호출할수도 있다. 메서드가 아님.

일정한 범위의 요소 여러개를 지울떄는 범위에 대해 빈 리스트를 대입한다. score[1:4]=[] 는 지우는것과 같다. del score[1:4]도 가능하다.

리스트의 모든 요소를 다 지워 리스트를 비울때는 clear 메서드를 사용한다. score[:]=[] 이렇게 빈 리스트를 대입하거나 del score[:] 명령으로 전체범위를 지울수도 있다.

//
 
>예제
score = [88,95,78,100,99]
print(score.pop()) #끝의 요소를 꺼냄
print(score.pop())
print(score.pop(1)) #1번째 요소를 꺼냄 =95
print(score)
 
>예제
99
100
95
[88, 78]

remove와 del은 요소를 지우기만 하는데 pop은 삭제한 요소를 꺼내서 리턴한다. 첨자를 지정하여 지울 대상을 지정하되 인수가 없으면 마지막 요소를 빼낸다. 인수를 생략하면 pop(-1)을 호출한것과 같다.

리스트의 끝에서 append로 추가하고 pop로 제거하면 선입 선출 방식으로 동작하는 스택(stack)이 된다. pop(0)호출로 리스트의 선두 요소를 뺴내면 큐(queue)로 사용할수 있지만 앞쪽의 요소를 지우는 동작은 뒤쪽의 모든 요소를 이동시켜야 하므로 느리고 비효율적이다. 파이썬은 큐 자료구조를 제공하는 별도의 Queue 객체를 지원하므로 리스트를 큐로 쓰지는 않는다.

//
 
>예제
score = [88,95,78,100,99,88,78,50]
print(score)
perfect = score.index(100) #특정 요소의 위치를 찾음, 없으면 예외발생
print("100점 받은 학생은 "+str(perfect)+" 번입니다")
pernum = score.count(100) #특정 요소값의 개수 조사
print("만점자 수는 "+str(pernum)+" 명입니다")

>결과
[88, 95, 78, 100, 99, 88, 78, 50]
100점 받은 학생은 3 번입니다

만점자 수는 1 명입니다

리스트의 검색 메서드는 문자열의 경우와 거의 같다.
 


//

>예제
score = [88,95,78,100,99,88,78,50]
print("리스트 길이" ,len(score))
print("리스트 요소 최대값",max(score))
print("리스트 요소 최소값",min(score))

>결과
리스트 길이 8
리스트 요소 최대값 100
리스트 요소 최소값 50

리스트의 길이를 조사할때는 len 내장함수를 사용한다. min,max 내장함수는 리스트의 요소중 최소값, 최대값을 갖는다.


